plugins {
    id 'de.undercouch.download' version '3.1.1'
    id 'base'
    id 'maven-publish'
}

import de.undercouch.gradle.tasks.download.Download

ext.mpsMajor = '2021.3'
ext.mpsBuild = '2021.3'

def mpsDownloadDir = new File(project.buildDir, "MPS-${mpsBuild}")
def mpsDownloadFile = new File(mpsDownloadDir, "MPS-${mpsBuild}.zip")
def eapSuffix = (mpsBuild.contains("EAP")) ? " EAP" : ""
def mpsUnpackedDir = new File(mpsDownloadDir, "MPS ${mpsMajor}${eapSuffix}")

// Downloads MPS from jetbrains.com into ${mpsDownloadFile}
task downloadMPS(type: Download) {
    doFirst {
        if (!mpsDownloadDir.exists()) {
            ant.mkdir(dir: mpsDownloadDir)
        }
    }
    src "http://download.jetbrains.com/mps/${mpsMajor}/MPS-${mpsBuild}.zip"
    dest mpsDownloadFile
    overwrite false
}

task unzipMPS(dependsOn: downloadMPS) {
    inputs.file mpsDownloadFile
    outputs.dir mpsDownloadDir

    doLast {
        ant.unzip src: mpsDownloadFile, dest: mpsDownloadDir
    }
}

// Repackages MPS so that the resulting zip contains the contents of 'MPS 3.<x>' directory of the original MPS zip
task publishMPS(type: Zip, dependsOn: unzipMPS) {
    from mpsUnpackedDir
}

/*
 * Repackage frequently needed JAR libraries shipping with MPS (in the lib and plugins folders) as individually consumable artifacts.
 * This is useful for the development of command line utilities, Maven plugins, Gradle plugins, or other things
 * that require only smaller parts of the MPS runtime and don't want to end up with a full MPS in their dependencies.
 */

task packageMpsCore(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-core'
    from zipTree("$mpsUnpackedDir/lib/mps-core.jar")
}

task packageMpsWorkbench(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-workbench'
    from zipTree("$mpsUnpackedDir/lib/mps-workbench.jar")
}

task packageMpsCoreSources(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-core'
    classifier 'sources'
    from zipTree("$mpsUnpackedDir/lib/MPS-src.zip")
}

task packageMpsEditor(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-editor'
    from zipTree("$mpsUnpackedDir/lib/mps-editor.jar")
}

task packageMpsEditorApi(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-editor-api'
    from zipTree("$mpsUnpackedDir/lib/mps-editor-api.jar")
}

task packageMpsEditorRuntime(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-editor-runtime'
    from zipTree("$mpsUnpackedDir/lib/mps-editor-runtime.jar")
}

task packageMpsOpenApi(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-openapi'
    from zipTree("$mpsUnpackedDir/lib/mps-openapi.jar")
}

task packageMpsOpenApiSources(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-openapi'
    classifier 'sources'
    from(zipTree("$mpsUnpackedDir/lib/MPS-src.zip")) {
        include 'org/jetbrains/mps/**'
    }
}

task packageMpsTool(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-tool'
    from zipTree("$mpsUnpackedDir/lib/mpsant/mps-tool.jar")
}

task packageMpsToolSources(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-tool'
    classifier 'sources'
    from(zipTree("$mpsUnpackedDir/lib/MPS-src.zip")) {
        include 'jetbrains/mps/tool/builder/**'
    }
}

task packageMpsRun(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-run'
    from zipTree("$mpsUnpackedDir/lib/mpsant/mps-run.jar")
}

// MPS-src.zip doesn't contain sources for mps-run.jar
/*
task packageMpsRunSources(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-run'
    classifier 'sources'
    from zipTree("$mpsUnpackedDir/lib/MPS-src.zip")
}
 */

task packageMpsEnvironment(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-environment'
    from zipTree("$mpsUnpackedDir/lib/mps-environment.jar")
}

task packageMpsEnvironmentSources(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-environment'
    classifier 'sources'
    from(zipTree("$mpsUnpackedDir/lib/MPS-src.zip")) {
        include 'jetbrains/mps/tool/common/**'
        include 'jetbrains/mps/tool/environment/**'
        include 'jetbrains/mps/core/tool/environment/**'
    }
}

task packageMpsPlatform(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-platform'
    from zipTree("$mpsUnpackedDir/lib/mps-platform.jar")
}

task packageMpsPlatformSources(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-platform'
    classifier 'sources'
    from zipTree("$mpsUnpackedDir/lib/MPS-src.zip")
}

task packageUtil(type: Jar, dependsOn: unzipMPS) {
    baseName 'util'
    from zipTree("$mpsUnpackedDir/lib/util.jar")
}

task packageUtilSources(type: Jar, dependsOn: unzipMPS) {
    baseName 'util'
    classifier 'sources'
    from zipTree("$mpsUnpackedDir/lib/MPS-src.zip")
}

/*task packageExtensions(type: Jar, dependsOn: unzipMPS) {
    baseName 'extensions'
    from zipTree("$mpsUnpackedDir/lib/extensions.jar")
}*/

task packageMpsConsoleIdeCommandsRuntime(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-console-ide-commands-runtime'
    from zipTree("$mpsUnpackedDir/plugins/mps-console/lang/jetbrains.mps.console.ideCommands.runtime.jar")
}

task packageMpsConsoleIdeCommandsRuntimeSources(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-console-ide-commands-runtime'
    classifier 'sources'
    from zipTree("$mpsUnpackedDir/plugins/mps-console/lang/jetbrains.mps.console.ideCommands.runtime-src.jar")
}

task packageMpsMessaging(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-messaging'
    from zipTree("$mpsUnpackedDir/lib/mps-messaging.jar")
}

task packageMpsMessagingSources(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-messaging'
    classifier 'sources'
    from(zipTree("$mpsUnpackedDir/lib/MPS-src.zip")) {
        include 'jetbrains/mps/messages/**'
    }
}

task packageMpsModelchecker(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-modelchecker'
    from zipTree("$mpsUnpackedDir/plugins/mps-modelchecker/lib/modelchecker.jar")
}

task packageMpsModelcheckerSources(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-modelchecker'
    classifier 'sources'
    from(zipTree("$mpsUnpackedDir/lib/MPS-src.zip")) {
        include 'jetbrains/mps/ide/modelchecker/**'
    }
}

task packageMpsHttpsupportRuntime(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-httpsupport-runtime'
    from zipTree("$mpsUnpackedDir/plugins/mps-httpsupport/solutions/jetbrains.mps.ide.httpsupport.runtime.jar")
}

task packageMpsHttpsupportRuntimeSources(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-httpsupport-runtime'
    classifier 'sources'
    from(zipTree("$mpsUnpackedDir/lib/MPS-src.zip")) {
        include 'jetbrains/mps/ide/httpsupport/runtime/**'
    }
}

task packageMpsProjectCheck(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-project-check'
    from zipTree("$mpsUnpackedDir/lib/mps-project-check.jar")
}

task packageMpsProjectCheckSources(type: Jar, dependsOn: unzipMPS) {
    baseName 'mps-project-check'
    classifier 'sources'
    from(zipTree("$mpsUnpackedDir/lib/MPS-src.zip")) {
        include 'jetbrains/mps/checkers/**'
        include 'jetbrains/mps/core/platform/MPSProjectValidation.java'
        include 'jetbrains/mps/project/validation/**'
    }
}

task packagePlatformApi(type: Jar, dependsOn: unzipMPS) {
    baseName 'platform-api'
    from zipTree("$mpsUnpackedDir/lib/platform-api.jar")
}

task packageJdom(type: Jar, dependsOn: unzipMPS) {
    baseName 'jdom'
    from zipTree("$mpsUnpackedDir/lib/jdom.jar")
}

task packageAnnotations(type: Jar, dependsOn: unzipMPS) {
    baseName 'annotations'
    from zipTree("$mpsUnpackedDir/lib/annotations.jar")
}

publishing {
    repositories {
        maven {
            if (project.hasProperty('nexusUsername')) {
                credentials {
                    username project.getProperty('nexusUsername')
                    password project.getProperty('nexusPassword')
                }
            }
            url project.findProperty('repository') ?: 'https://projects.itemis.de/nexus/content/repositories/mbeddr'
        }
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/mbeddr/build.publish.mps")
                if(project.hasProperty("gpr.token")) {
                    credentials {
                        username = project.findProperty("gpr.user")
                        password = project.findProperty("gpr.token")
                    }
                }
            }
        }
    }
    publications {
        mps(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps'
            version mpsBuild
            artifact publishMPS
        }
        mpsCore(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-core'
            version mpsBuild
            artifact packageMpsCore
            artifact packageMpsCoreSources
        }
        mpsEditor(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-editor'
            version mpsBuild
            artifact packageMpsEditor
        }
        mpsEditorApi(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-editor-api'
            version mpsBuild
            artifact packageMpsEditorApi
        }
        mpsEditorRuntime(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-editor-runtime'
            version mpsBuild
            artifact packageMpsEditorRuntime
        }
        mpsOpenApi(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-openapi'
            version mpsBuild
            artifact packageMpsOpenApi
            artifact packageMpsOpenApiSources
        }
        mpsTool(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-tool'
            version mpsBuild
            artifact packageMpsTool
            artifact packageMpsToolSources
        }
        mpsRun(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-run'
            version mpsBuild
            artifact packageMpsRun
            //artifact packageMpsRunSources
        }
        mpsEnvironment(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-environment'
            version mpsBuild
            artifact packageMpsEnvironment
            artifact packageMpsEnvironmentSources
        }
        mpsPlatform(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-platform'
            version mpsBuild
            artifact packageMpsPlatform
            artifact packageMpsPlatformSources
        }
        util(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'util'
            version mpsBuild
            artifact packageUtil
            artifact packageUtilSources
        }
        /*extensions(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'extensions'
            version mpsBuild
            artifact packageExtensions
        }*/
        mpsConsoleIdeCommandsRuntime(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-console-ide-commands-runtime'
            version mpsBuild
            artifact packageMpsConsoleIdeCommandsRuntime
            artifact packageMpsConsoleIdeCommandsRuntimeSources
        }
        mpsMessaging(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-messaging'
            version mpsBuild
            artifact packageMpsMessaging
            artifact packageMpsMessagingSources
        }
        mpsModelchecker(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-modelchecker'
            version mpsBuild
            artifact packageMpsModelchecker
            artifact packageMpsModelcheckerSources
        }
        mpsHttpsupportRuntime(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-httpsupport-runtime'
            version mpsBuild
            artifact packageMpsHttpsupportRuntime
            artifact packageMpsHttpsupportRuntimeSources
        }
        mpsProjectCheck(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-project-check'
            version mpsBuild
            artifact packageMpsProjectCheck
            artifact packageMpsProjectCheckSources
        }
        platformApi(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'platform-api'
            version mpsBuild
            artifact packagePlatformApi
        }
        mpsWorkbench(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-workbench'
            version mpsBuild
            artifact packageMpsWorkbench
        }
        jdom(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'jdom'
            version mpsBuild
            artifact packageJdom
        }
        annotations(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'annotations'
            version mpsBuild
            artifact packageAnnotations
        }
    }
}
