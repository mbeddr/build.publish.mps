plugins {
    id 'de.undercouch.download' version '5.6.0'
    id 'base'
    id 'maven-publish'
}

import de.undercouch.gradle.tasks.download.Download

import java.util.regex.Pattern

if (!project.hasProperty('mpsVersion')) {
    throw new GradleException("mpsVersion property must be defined, example: '2024.1.2' or '2024.2-EAP1'")
}

def mpsMajorRegex = Pattern.compile(/^(\d{4}\.\d)(?!\d)/) // four digits, '.', a digit, not immediately followed by a digit
def mpsMajorMatcher = mpsMajorRegex.matcher(project.mpsVersion)

if (!mpsMajorMatcher.find()) {
    throw new GradleException("mpsVersion property must begin with a version number, example: '2024.1.2' or '2024.2-EAP1'")
}

ext.mpsMajor = mpsMajorMatcher.group(1)

def mpsUnzipDir = layout.buildDirectory.dir("MPS-${mpsVersion}").get().asFile
def mpsDownloadFile = layout.buildDirectory.file("MPS-${mpsVersion}.zip")
def eapSuffix = (mpsVersion.contains("EAP")) ? " EAP" : ""
def mpsUnpackedDir = new File(mpsUnzipDir, "MPS ${mpsMajor}${eapSuffix}")

task testPackaging{
    description "Task triggering all packaging tasks"
}

testPackaging.dependsOn {
    tasks.withType(Jar).findAll {jarTask -> jarTask.name.startsWith('package')}
}

// Downloads MPS from jetbrains.com into ${mpsDownloadFile}
task downloadMPS(type: Download) {
    src "http://download.jetbrains.com/mps/${mpsMajor}/MPS-${mpsVersion}.zip"
    dest mpsDownloadFile
    overwrite false
}

task unzipMPS(type: Sync, dependsOn: downloadMPS) {
    from(zipTree(mpsDownloadFile))
    into(mpsUnzipDir)
}

task publishMPS(type: Zip, dependsOn: unzipMPS) {
    from mpsUnpackedDir
}

/*
 * Repackage frequently needed JAR libraries shipping with MPS (in the lib and plugins folders) as individually consumable artifacts.
 * This is useful for the development of command line utilities, Maven plugins, Gradle plugins, or other things
 * that require only smaller parts of the MPS runtime and don't want to end up with a full MPS in their dependencies.
 */

task packageMpsCore(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-core'
    from zipTree("$mpsUnpackedDir/lib/mps-core.jar")
}

task packageMpsWorkbench(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-workbench'
    from zipTree("$mpsUnpackedDir/lib/mps-workbench.jar")
}

task packageMpsCoreSources(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-core'
    archiveClassifier = 'sources'
    from zipTree("$mpsUnpackedDir/lib/MPS-src.zip")
}

task packageMpsEditor(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-editor'
    from zipTree("$mpsUnpackedDir/lib/mps-editor.jar")
}

task packageMpsEditorApi(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-editor-api'
    from zipTree("$mpsUnpackedDir/lib/mps-editor-api.jar")
}

task packageMpsEditorRuntime(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-editor-runtime'
    from zipTree("$mpsUnpackedDir/lib/mps-editor-runtime.jar")
}

task packageMpsOpenApi(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-openapi'
    from zipTree("$mpsUnpackedDir/lib/mps-openapi.jar")
}

task packageMpsOpenApiSources(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-openapi'
    archiveClassifier = 'sources'
    from(zipTree("$mpsUnpackedDir/lib/MPS-src.zip")) {
        include 'org/jetbrains/mps/**'
    }
}

task packageMpsTool(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-tool'
    from zipTree("$mpsUnpackedDir/lib/mpsant/mps-tool.jar")
}

task packageMpsToolSources(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-tool'
    archiveClassifier = 'sources'
    from(zipTree("$mpsUnpackedDir/lib/MPS-src.zip")) {
        include 'jetbrains/mps/tool/builder/**'
    }
}

task packageMpsRun(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-run'
    from zipTree("$mpsUnpackedDir/lib/mpsant/mps-run.jar")
}

// MPS-src.zip doesn't contain sources for mps-run.jar
/*
task packageMpsRunSources(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-run'
    archiveClassifier = 'sources'
    from zipTree("$mpsUnpackedDir/lib/MPS-src.zip")
}
 */

task packageMpsEnvironment(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-environment'
    from zipTree("$mpsUnpackedDir/lib/mps-environment.jar")
}

task packageMpsEnvironmentSources(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-environment'
    archiveClassifier = 'sources'
    from(zipTree("$mpsUnpackedDir/lib/MPS-src.zip")) {
        include 'jetbrains/mps/tool/common/**'
        include 'jetbrains/mps/tool/environment/**'
        include 'jetbrains/mps/core/tool/environment/**'
    }
}

task packageMpsPlatform(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-platform'
    from zipTree("$mpsUnpackedDir/lib/mps-platform.jar")
}

task packageMpsPlatformSources(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-platform'
    archiveClassifier = 'sources'
    from zipTree("$mpsUnpackedDir/lib/MPS-src.zip")
}

task packageUtil(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'util'
    from zipTree("$mpsUnpackedDir/lib/util.jar")
}

task packageUtilSources(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'util'
    archiveClassifier = 'sources'
    from zipTree("$mpsUnpackedDir/lib/MPS-src.zip")
}

/*task packageExtensions(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'extensions'
    from zipTree("$mpsUnpackedDir/lib/extensions.jar")
}*/

task packageMpsConsoleIdeCommandsRuntime(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-console-ide-commands-runtime'
    from zipTree("$mpsUnpackedDir/plugins/mps-console/lang/jetbrains.mps.console.ideCommands.runtime.jar")
}

task packageMpsConsoleIdeCommandsRuntimeSources(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-console-ide-commands-runtime'
    archiveClassifier = 'sources'
    from zipTree("$mpsUnpackedDir/plugins/mps-console/lang/jetbrains.mps.console.ideCommands.runtime-src.jar")
}

if (mpsVersion < '2023') {
    // 2022.3 was the last version to have these jars
    task packageMpsMessaging(type: Jar, dependsOn: unzipMPS) {
        archiveBaseName = 'mps-messaging'
        from zipTree("$mpsUnpackedDir/lib/mps-messaging.jar")
    }

    task packageMpsMessagingSources(type: Jar, dependsOn: unzipMPS) {
        archiveBaseName = 'mps-messaging'
        archiveClassifier = 'sources'
        from(zipTree("$mpsUnpackedDir/lib/MPS-src.zip")) {
            include 'jetbrains/mps/messages/**'
        }
    }
}

task packageMpsModelchecker(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-modelchecker'
    from zipTree("$mpsUnpackedDir/plugins/mps-modelchecker/lib/modelchecker.jar")
}

task packageMpsModelcheckerSources(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-modelchecker'
    archiveClassifier = 'sources'
    from(zipTree("$mpsUnpackedDir/lib/MPS-src.zip")) {
        include 'jetbrains/mps/ide/modelchecker/**'
    }
}

task packageMpsHttpsupportRuntime(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-httpsupport-runtime'
    from zipTree("$mpsUnpackedDir/plugins/mps-httpsupport/solutions/jetbrains.mps.ide.httpsupport.runtime.jar")
}

task packageMpsHttpsupportRuntimeSources(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-httpsupport-runtime'
    archiveClassifier = 'sources'
    from(zipTree("$mpsUnpackedDir/lib/MPS-src.zip")) {
        include 'jetbrains/mps/ide/httpsupport/runtime/**'
    }
}

task packageMpsProjectCheck(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-project-check'
    from zipTree("$mpsUnpackedDir/lib/mps-project-check.jar")
}

task packageMpsProjectCheckSources(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'mps-project-check'
    archiveClassifier = 'sources'
    from(zipTree("$mpsUnpackedDir/lib/MPS-src.zip")) {
        include 'jetbrains/mps/checkers/**'
        include 'jetbrains/mps/core/platform/MPSProjectValidation.java'
        include 'jetbrains/mps/project/validation/**'
    }
}

/*
task packagePlatformApi(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'platform-api'
    from zipTree("$mpsUnpackedDir/lib/platform-api.jar")
}
 */


task packageAnnotations(type: Jar, dependsOn: unzipMPS) {
    archiveBaseName = 'annotations'
    from zipTree("$mpsUnpackedDir/lib/annotations.jar")
}

def additionalPomInfo = {
    licenses {
        // official SPDX identifier
        // see https://spdx.org/licenses/ for list
        license {
            name = "Apache-2.0"
            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
            comments = "A business-friendly OSS license"
            distribution = "repo"
        }
    }
    organization {
        name = "JetBrains s.r.o"
        url = "https://www.jetbrains.com"
    }
}

publishing {
    repositories {
        maven {
            name = "itemisCloud"
            url = uri("https://artifacts.itemis.cloud/repository/maven-mps-releases/")
            credentials {
                username = project.findProperty("artifacts.itemis.cloud.user")
                password = project.findProperty("artifacts.itemis.cloud.pw")
            }
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/mbeddr/build.publish.mps")
            if (project.hasProperty("gpr.token")) {
                credentials {
                    username = project.findProperty("gpr.user")
                    password = project.findProperty("gpr.token")
                }
            }
        }
    }
    publications {
        mps(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps'
            version mpsVersion
            artifact publishMPS
            pom additionalPomInfo
        }
        mpsCore(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-core'
            version mpsVersion
            artifact packageMpsCore
            artifact packageMpsCoreSources
            pom additionalPomInfo
        }
        mpsEditor(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-editor'
            version mpsVersion
            artifact packageMpsEditor
            pom additionalPomInfo
        }
        mpsEditorApi(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-editor-api'
            version mpsVersion
            artifact packageMpsEditorApi
            pom additionalPomInfo
        }
        mpsEditorRuntime(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-editor-runtime'
            version mpsVersion
            artifact packageMpsEditorRuntime
            pom additionalPomInfo
        }
        mpsOpenApi(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-openapi'
            version mpsVersion
            artifact packageMpsOpenApi
            artifact packageMpsOpenApiSources
            pom additionalPomInfo
        }
        mpsTool(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-tool'
            version mpsVersion
            artifact packageMpsTool
            artifact packageMpsToolSources
            pom additionalPomInfo
        }
        mpsRun(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-run'
            version mpsVersion
            artifact packageMpsRun
            //artifact packageMpsRunSources
            pom additionalPomInfo
        }
        mpsEnvironment(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-environment'
            version mpsVersion
            artifact packageMpsEnvironment
            artifact packageMpsEnvironmentSources
            pom additionalPomInfo
        }
        mpsPlatform(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-platform'
            version mpsVersion
            artifact packageMpsPlatform
            artifact packageMpsPlatformSources
            pom additionalPomInfo
        }
        util(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'util'
            version mpsVersion
            artifact packageUtil
            artifact packageUtilSources
            pom additionalPomInfo
        }
        /*extensions(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'extensions'
            version mpsVersion
            artifact packageExtensions
        }*/
        mpsConsoleIdeCommandsRuntime(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-console-ide-commands-runtime'
            version mpsVersion
            artifact packageMpsConsoleIdeCommandsRuntime
            artifact packageMpsConsoleIdeCommandsRuntimeSources
            pom additionalPomInfo
        }
        if (mpsVersion < '2023') {
            // 2022.3 was the last version to have these jars
            mpsMessaging(MavenPublication) {
                groupId 'com.jetbrains'
                artifactId 'mps-messaging'
                version mpsVersion
                artifact packageMpsMessaging
                artifact packageMpsMessagingSources
            }
        }
        mpsModelchecker(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-modelchecker'
            version mpsVersion
            artifact packageMpsModelchecker
            artifact packageMpsModelcheckerSources
            pom additionalPomInfo
        }
        mpsHttpsupportRuntime(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-httpsupport-runtime'
            version mpsVersion
            artifact packageMpsHttpsupportRuntime
            artifact packageMpsHttpsupportRuntimeSources
            pom additionalPomInfo
        }
        mpsProjectCheck(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-project-check'
            version mpsVersion
            artifact packageMpsProjectCheck
            artifact packageMpsProjectCheckSources
            pom additionalPomInfo
        }
        /*
        platformApi(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'platform-api'
            version mpsVersion
            artifact packagePlatformApi
        }
         */
        mpsWorkbench(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'mps-workbench'
            version mpsVersion
            artifact packageMpsWorkbench
            pom additionalPomInfo
        }
        annotations(MavenPublication) {
            groupId 'com.jetbrains'
            artifactId 'annotations'
            version mpsVersion
            artifact packageAnnotations
            pom additionalPomInfo
        }
    }
}
